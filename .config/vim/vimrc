"Vundle Setup Requires nocompatible and filetype to be off.  
set nocompatible
filetype off

set directory=$XDG_CACHE_HOME/vim,/tmp
set backupdir=$XDG_CACHE_HOME/vim,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIMRUNTIME
set runtimepath+=$XDG_CONFIG_HOME/vim/bundle/Vundle.vim
set runtimepath+=$XDG_CONFIG_HOME/fzf/

let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

call vundle#begin('$XDG_CONFIG_HOME/vim/bundle')

"Plugins
Plugin 'VundleVim/Vundle.vim'

Plugin 'carlhuda/janus'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'fogine/vim-i3wm-tmux-navigator'
Plugin 'godlygeek/tabular'
Plugin 'PotatoesMaster/i3-vim-syntax'
Plugin 'plasticboy/vim-markdown'
Plugin 'sheerun/vim-polyglot'
Plugin 'SirVer/ultisnips'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'honza/vim-snippets'
Plugin 'tmhedberg/SimpylFold'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-obsession'
Plugin 'junegunn/fzf.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'w0rp/ale'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'freitass/todo.txt-vim.git'
Plugin 'Sirsireesh/vim-dlang-phobos-highlighter'

"Colorschemes 
Plugin 'ayu-theme/ayu-vim'
Plugin 'sickill/vim-monokai'
Plugin 'fatih/molokai'
Plugin 'kristijanhusak/vim-hybrid-material'
Plugin 'joshdick/onedark.vim'
Plugin 'rakr/vim-one'

Plugin 'JesseKPhillips/d.vim'
Plugin 'vdanarye/vim-dutyl'

Bundle 'edkolev/tmuxline.vim'
call vundle#end()

filetype on
filetype plugin on
filetype indent on

"Plugin Setup
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

set termguicolors
set background=dark
colorscheme one

"Ale
let b:ale_open_list = 1
let b:ale_list_window_size = 5

augroup CloseLoclistWindowGroup
 autocmd!
 autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

"Markdown
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_math = 1

"Tmuxline
  let g:tmuxline_preset = {
      \'a'       : '#S',
      \'win'     : '#I #W',
      \'cwin'    : '#I #W',
      \'z'       : '#H',
      \'options' : {'status-justify' : 'left'}}

"Airline
"let g:airline_theme = 'deus'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1 
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set statusline=%{LinterStatus()}

"Polyglot
let g:python_highlight_spaces_errors = 1

"YCM configs
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion = 1

"SimpylFold
let g:SimpylFold_docstring_preview = 1

"Nerdtree stuff
"autocmd vimenter * NERDTree | wincmd w
autocmd StdinReadPre * let s:std_in = 1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") |
			 "\ exe 'NERDTree' argv()[0] |
			 "\ wincmd p |
			 "\ ene |
			 "\ exe 'cd '.argv()[0] |
				"\ endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeWinPos = 'right'
let g:NERDTreeShowHidden=1

"Ultisnips
let g:UltiSnipsSnippetsDir = "~/.config/vim/UltiSnips"
let g:UltiSnipsExpandTrigger="<leader>e"
let g:UltiSnipsJumpForwardTrigger="<c-i>"
let g:UltiSnipsJumpBackwardTrigger="<c-u>"


"Vim Setup
syntax on
set number
set noshowmode
set backspace=2
set laststatus=2
set tabstop=4
set shiftwidth=4

set clipboard=unnamedplus

set foldmethod=indent
set foldlevel=99

"Key bindings
set pastetoggle=<F2>
map <C-d> :NERDTreeToggle<CR>

inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap ' ''<Left>

inoremap <leader>' '
inoremap <leader>" "
inoremap <leader>( (
inoremap <leader>{ {
inoremap <leader>[ [

vnoremap _( <Esc>`>a)<Esc>`<i(<Esc>
vnoremap _{ <Esc>`>a}<Esc>`<i{<Esc>
vnoremap _[ <Esc>`>a]<Esc>`<i[<Esc>
vnoremap _" <Esc>`>a"<Esc>`<i"<Esc>
vnoremap _' <Esc>`>a'<Esc>`<i'<Esc>

autocmd Syntax html,vim inoremap < <lt>><Esc>i| inoremap > <c-r>=ClosePair('>')<CR>
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap } <c-r>=CloseBracket()<CR>
inoremap " <c-r>=QuoteDelim('"')<CR>
inoremap ' <c-r>=QuoteDelim("'")<CR>

function ClosePair(char)
 if getline('.')[col('.') - 1] == a:char
 return "\<Right>"
 else
 return a:char
 endif
endf

function CloseBracket()
 if match(getline(line('.') + 1), '\s*}') < 0
 return "\<CR>}"
 else
 return "\<Esc>j0f}a"
 endif
endf

function QuoteDelim(char)
 let line = getline('.')
 let col = col('.')
 if line[col - 2] == "\\"
 "Inserting a quoted quotation mark into the string
 return a:char
 elseif line[col - 1] == a:char
 "Escaping out of the string
 return "\<Right>"
 else
 "Starting a string
 return a:char.a:char."\<Esc>i"
 endif
endf


inoremap <C-j> <Esc>/[)}"'\]>]<CR>:nohl<CR>a
nnoremap <C-j> <Esc>/[)}"'\]>]<CR>:nohl<CR>

nnoremap <leader>1  1gt
nnoremap <leader>2  2gt
nnoremap <leader>3  3gt
nnoremap <leader>4  4gt
nnoremap <leader>5  5gt
nnoremap <leader>6  6gt
nnoremap <leader>7  7gt
nnoremap <leader>8  8gt
nnoremap <leader>9  9gt
nnoremap <leader>0  10gt

nmap <leader>f <Plug>(ale_fix)
nmap <leader>a <Plug>(ale_toggle)
nmap <silent> <leader>k <Plug>(ale_previous_wrap)
nmap <silent> <leader>j <Plug>(ale_next_wrap)

nnoremap <leader>g :YcmCompleter GoTo<CR>

nnoremap <space> za

"Autostrip trailing whitespace
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

