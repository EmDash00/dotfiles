Exception 
exit()
import Timer
exit()
import Timer
exit()
import Timer
exit()
import Timer
exit()
import Timer
exit()
import Timer
xit()
exit()
import Timer
eexit()
exit()
import Timer
Timer.__docstring__
Timer.__doc__
exit()
import Timer
Timer.Timer.__init__.__doc__
timer = Timer(units=UNITS.SEC)
from Units import Units
exit()
from Timer import Timer
from Units import Units
timer = Timer(units=UNITS.SEC)
timer = Timer(units=Units.SEC)
timer.elapsed()
exit()
from Units import Units
Units.converesion(Units.SEC)
Units.conversion(Units.SEC)
Units.SEC
unit = Units.SEC
units.conversion()
unit.conversion()
exit()
unit = Units.SEC
from Units import Units
unit = Units.SEC
unit.conversion()
exit()
import Timer
timer = Timer(Units.SEC)
from Units import Units
timer = Timer(Units.SEC)
timer = Timer(units=Units.SEC)
exit()
from Timer import Timer
from Units import Units
timer = Timer(units=Units.SEC)
timer.elapsed()
exit()
from Timer import Timer
from Units import Units
timer = Timer(units=Units.SEC)
timer.elapsed()
exit()
from Units import Units
from Timer import Timer
timer = Timer(units=Units.SEC)
timer.elapsed()
exit()
from Units import Units
from Timer import Timer
timer = Timer(units=Units.SEC)
timer.elapsed()
exit()
from Units import Units
from Timer import Timer
timer = Timer(units=Units.SEC)
timer.elapsed()
exit()
from Units import Units
from Timer import Timer
timer = Timer(units=Units.SEC)
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.start()
timer.elapsed()
exit()
from Timer import Timer
from Units import Units
timer = Timer(units=Units.SEC)
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.start()
timer.elapsed()
timer.reset()
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
timer = CycleTimer(1, units=Units.SEC)
from Units import Units
timer = CycleTimer(1, units=Units.SEC)
timer.elapsed()
timer.start()
timer.elapsed()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(1, units=Units.SEC)
timer.start()
timer.elapsed()
timer.reset()
timer.elapsed()
timer.reset_interval(2)
exit()
from Units import Units
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC)
timer.start()
timer.elapsed()
timer.reset()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=10, units=Units.SEC)
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.tick()
timer.reset_interval(interval=1, align=False, redefine_past=True)
timer.elapsed()
exit()
from Units import Units
from CycleTImer import CycleTimer
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=UNITS.SEC)
timer = CycleTimer(interval=2, units=UNIT.SEC)
timer = CycleTimer(interval=2, units=Units.SEC)
timer.elapsed()
timer.start()
timer.elapsed()
timer.start()
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed(
)
timer.elapsed()
timer.reset_interval(interval=1, redefine_past=True)
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.reset_interval(interval=10)
timer.start()
timer.elapsed()
exit()
from Units import Units
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC)
timer.start()
timer.stop()
timer.elapsed()
timer.reset_interval(interval=1)
timer.start()
timer.stop()
timer.elapsed(
)
timer.reset()
timer.elapsed()
exit()
from Units import Units
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC)
def tester():
   timer.start()
   for i in range(10):
       print("Hi")
       while(not timer.tick()):
           pass
tester()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=2, units=Units.SEC)
def tester():
exit()
from Units import Units
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC)
def tester():
    timer.start()
    for _ in range(10):
        print("Hi")
        while(not timer.tick()):
            pass
tester()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=2, units=Units.SEC)
def tester():
    timer.start()
    for _ in range(10):
        print("Hi")
        while(not timer.tick()):
            pass
tester()
exit()
def task():
    print("hi")
tasks = [task]
for thing in tasks:
    thing()
for thing in task:
    thing()
exit()
from bitarray import bitarray
exit()
from bitarray import bitarray
bitarray('1101')
hi = bitarray('1101')
len(hi)
from bitarray import bitarray
hi = bitarray('220')
hi = bitarray(220)
hi
len(hi)
from bitarray import bitarray
hi = bitarray(2.1)
hi = bitarray('hi')
range(-1)
for i in range(-1)
for i in range(-1):
    print i
    print(i)
for i in range(-1):
    print(i)
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=2, units=Units.SEC)
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.reset_interval(interval=1, redefine_past=True)
timer.elapsed()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=2, units=Units.SEC, strict=True)
timer.start()
timer.elapsed()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=2, units=Units.SEC, strict=True)
timer.start()
timer.elapsed()
exit()
from CycleTimer import CycleTimer
from Units import Units
timer = CycleTimer(interval=2, units=Units.SEC, strict=True)
timer.start()
timer.elapsed()
exit()
hi = 1
if (hi == 1):
    raise ValueError
exit()
from Units import Units
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC, strict=True)
timer.tick()
timer.elapsed()
exit()
from Units import Units
from CycleTimer import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC, strict=True)
timer = CycleTimer(interval=2, units=Units.SEC)
timer._strict
timer.reset_strict(strict=True)
timer.reset_strictness(strict=True)
timer._strict
timer.start()
timer.tick()
exit()
delay = lambda _: for i in range(10000): pass
delay = lambda _: while True: pass
delay = lambda _: (while True: pass
delay = lambda _: (while True: pass)
exit()
import util.rothtime
import sys
sys.path.insert('util/rothtime'
)
sys.path.insert(0, 'util/rothtime'
)
import util.rothtime
exit()
sys.path.insert(0, 'util/rothtime')
import sys
sys.path.insert(0, 'util/rothtime')
import util.rothtime
exit()
sys.path.insert(0, 'util/rothtime')
import sys
sys.path.insert(0, 'util/rothtime')
import util.rothtime
import rothtime
exit()
import sys
sys.path.insert(0, 'util/rothtime')
import util.rothtime
exit()
import sys
sys.path.insert(0, 'util/rothtime')
import util.rothtime
exit()
import sys
sys.path.insert(0, 'util/rothtime')
import util.rothtime
timer = CycleTimer(interval=2, units=Units.SEC)
from util.rothtime import CycleTimer
timer = CycleTimer(interval=2, units=Units.SEC)
from utils.rothtime import Units
from util.rothtime import Units
timer = CycleTimer(interval=2, units=Units.SEC)
exit()
from Timer import Timer
exit()
from util.rothtime import Timer
from util.rothtime import CycleTimer
exit()
from util.rothtime import CycleTimer
exit()
import sys
sys.path.insert(0, 'util/rothtime')
from Timer import Timer
from Units import Units
timer = Timer(units=Units.SEC)
exit()
from util.rothtime.Timer import Timer
exit()
from util.rothtime.Timer import Timer
exit()
from rothtime.Timer import Timer
exit()
import rothtime
exit()
import Units
Units.SEC
from Units import Units
Units.SEC
exit()
import rothtime
exit()
from .Units import Units
from Units import Units
exit()
import rothtime.Timer
import rothtime.Units
import rothtime.Timer
from rothtime.Units import Units
Units.SEC
import rothtime.Timer
exit()
from rothtime.Units import Units
from .Units import Units
from . import Units
exit()
from . import echo
from . import Units
from . import Unit
exit()
import rothtime
exit()
import sys
sys.path.insert(0, "./util/")
import util.rothtime
sys.path.insert(0, "./util/rothtime/")
import util
from util.rothtime import Timer
from util.rothtime import Units
Units.SEC
timer = Timer(units=Units.SEC)
exit9)
exit()
ls
import sys
sys.path.insert(0, "./util/rothtime/")
import util.*
from util import *
rothtime.Timer
exit()
from Timer import Timer
from Units import Units
timer = Timer()
timer.start()
timer.elapsed()
exit()
from Units import Units
from Timer import Timer
timer = Timer()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.start()
timer.elapsed()
timer.stop()
timer.elapsed()
timer.reset()
timer.elapsed(
)
exit()
from TimedTask import TimedTask
from Units import Units
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
from TimedTask import TimedTask
from Units import Units
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
from TimedTask import TimedTask
from Units import Units
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit9)
exit()
from TimedTask import TimedTask
from Units import Units
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
from Units import Units
from TimedTask import TimedTask
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
from TimedTask import TimedTask
from Units import Units
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
from Units import Units
from TimedTask import TimedTask
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
from Units import Units
from TimedTask import TimedTask
def sayhi():
    print("hi")
timed_task = TimedTask(interval=2, tasks=[sayhi])
timed_task.start()
exit()
tasks = [lambda _: print("Hi")]
for each task in tasks:
for task in tasks:
    task()
i = lambda _: print("hi")
i()
i(0)
i = lambda: print("hi")
i()
exit()
from Units import Units
from Timer import Timer
timer = Timer(start=True)
timer.elapsed()
exit()
from Timer import Timer
Timer.wait(1000)
exit()
from gr.pygr import *
for i in range(200):
    plot(x, sin(x + i / 10))
    gr.show()
for i in range(200):
    plot(i, sin(i / 10))
    gr.show()
exit()
import gr
from gr.pygr import *
import numpy as np
x = np.arange(0, 2 * wpi, 0.01)
x = np.arange(0, 2 * np.pi, 0.01)
for i in range(200):
    plot(x, sin(x + i / 10.0))
    gr.show()
for i in range(200):
    plot(x, np.sin(x + i / 10.0))
    gr.show()
exit()
window = (0, 5)
window[0]
hi = (0, 1)
hi + 1
hi += 1
exit9)
exit()
from timeit import default_timer
default_timer()
exit()
from Timer import TImer
from Timer import Timer
exit()
from Timer import Timer
exit()
from Timer import Timer
exit()
from Timer import Timer
import Timer
from Timer import Timer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
exit()
from CycleTimer import CycleTimer
CycleTimer.__doc__
CycleTimer.__init__.__doc__
exit()
import piplates
exit()
import piplates
uname -a
exit()
ls
from piplates import MOTORplate as MOTOR
exit()
import scipy
exit()
import sympy
exit()
exit9)
exit()
import sys
sys.path.append(0, './rothutils')
sys.path.insert(0, './rothutils')
exit
exit()
import sys
sys.path.insert(0, './rothutils')
sys.path.insert(0, './rothutils/time')
from rothutils import time
exit9)
exit()
import sys
sys.path.insert(0, './rothutils/rothutils/time')
from rothutils import time
exit()
import sys
sys.path.insert(0, "RothUtils/rothutils/time")
from rothutils import time
from RothUtils import time
ls
exit()
import sys
sys.path.insert(0, "RothUtils/.")
sys.path.insert(0, "RothUtils/rothutils/.")
sys.path.insert(0, "RothUtils/rothutils/time")
import rothutils
from rothutils import time
exit()
from tasking import iterate
from units import Units
def say_hi():
   print("hi")
exit
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1)
def say_hi():
   print("hi")
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1)
def say_hi():
   print("hi")
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1)
def say_hi():
   print("hi")
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1)
def say_hi():
   print("hi")
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1)
def say_hi():
   print("hi")
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1)
def say_hi():
   print("hi")
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True):
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
def say_hi():
   print("hi")
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=5, interval=1, blocking=True)
say_hi()
@iterate(n=5, interval=1, blocking=True)
def say_hi():
   print("hi") 
say_hi()
exit()
from tasking import iterate
from units import Units
@iterate(n=10, interval=1)
def say_hi():
   print("hi")
say_hi()
exit()
def say_hi():
   print("hi")
type(say_hi)
exit()
from units import Units
type(Units.SEC)
type(True)
type(5)
type([])
def hi():
   pass
type([hi])
exit()
pyqt
import Pt()y
exit()
from PyQt5 import QtNetwork.AbstractSocket
from PyQt5 import QtNetwork
from QtNetwork import AbstractSocket
from PyQt5.QtNetwork import AbstractSocket
from PyQt5.QtNetwork import TcpSocket
exit
exit()
from PyQt5.QtNetwork import AbstractSocket
from PyQt5.QtNetwork import QAbstractSocket
QAbstractSocket.AddressInUseError
QAbstractSocket.AddressInUseError.name
str(QAbstractSocket.OperationErroir
str(QAbstractSocket.OperationError.value
str(QAbstractSocket.OperationError.value)
str(QAbstractSocket.OperationError.value()i)
QAbstractSocket.OperationError.value()
QAbstractSocket.OperationError.value
QAbstractSocket.OperationErroir
QAbstractSocket.Signals
QAbstractSocket.SocketError
QAbstractSocket.SocketError.
type(True)
type(QAbstractSocket.OperationError)
exit()
import math
math.\
floor(2.5)
exit()
hi = lambda 3: floor(3)
hi = lambda: floor(3)
hi()
from math import floor
hi()
exit()
from PyQt5.QtNetwork import QTcpSocket
exit()
from PyQt5 import QtNetwork
from QtNetwork import QTcpSocket
import QtNetwork.QTcpSocket
from PyQt5.QtNetwork import QTcpSocket
exit()
import zmq
exit()
value = 2
if (type(value) == int or bool):
   print("yes")
exit()
value = 2
if (type(value) == float or bool):
   print("yes")
if (type(value) == str or bool):
   print("yes")
exit()
import objdict
data = ObjDict
data = ObjDict()
from objdict import ObjDict
data = ObjDict()
exit()
from objdict import ObjDict
data = ObjDict()
exit()
data = ObjDict()
from objdict import ObjDict
data = ObjDict()
data.x["y"] = 3
data.x
xData = data.x
data.x = 'x'
data[x]
data.x
data.y = 'y'
data.y['hi'] = "greeting"
exit()
from objdict import ObjDict
data = ObjDict([])
data.append(x)
data.x = 'x'
data.x.y = 'y'
data.y = ObjDict({'y' : 'y'})
data.y
data.y['z'] = 'z'
exit()
from objdict import ObjDict
data.x = {'x' : 'x'}
data = ObjDict([])
data.x = {'x' : 'x'}
data.x
data.x.y = 1
exit()
exit()\
exit()
import zm
import zmq
from zmq import Context
context = Context()
socket = context(zmq.REQ)
socket = context.socket(zmq.REQ)
socket.connect("tcp://*25565)
socket.connect("tcp://*25565")
socket.connect("tcp://*:25565")
socket.connect("tcp://localhost:25565")
socket.send_string("hey there")
socket.connect("tcp://localhost:25565")
socket.send_string("hey there")
socket.state()
exit()
import zmq
from zmq import Context
socket = context.socket(zmq.REQ)
context = Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://localhost:25565")
socket.bind("tcp://*:25565")
socket.bind("tcp://*:25566")
socket.recv_string()
socket.send_string("Hey!")
socket.recv_string()
socket.send_string("Hey!")
socket.close()
exit()
import zmq
from zmq import Context
context = Context()
socket = context.socket(zmq.REP)
from zmq import Poller
poller = Poller()
poller.register(socket, zmq.POLLIN)
def recv():
   try:
      socks = dict(poller.poll())
   except zmq.ZMQError:
      break
   for socket in socks:
      message = socket.recv_string()
      socket.send_string("Response")
exit()
import zmq
from zmq import Poller
context = Context()
from zmq import Context
context = Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:25580")
socket.send_string("blah")
socket.close()
exit()
import zmq
from zmq import Context
context = Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:25580")
socket.send_string("Hi world 1")
socket.recv_string()
socket.disconnect("tcp://localhost:25580")
exit()
import zmq
from zmq import Context
context = Context()
socket = context.socket(zmq.REQ)
socket.bind("127.0.0.1:25580")
socket.bind("tcp://127.0.0.1:25580")
socket.close()
socket.bind("tcp://localhost:25580")
socket = context.socket(zmq.REQ)
socket.bind("tcp://localhost:25580")
exit()
import json
format = json.dumps(1)
format
data = json.loads(format)
data
datta = json.dumps(True)
format = json.dumps(True)
data = json.loads(format)
data
type(data)
import pickle
complex
cmp = complex(1, 2)
cmp
p_cmp = pickle.dumps(cmp)
p_cmp
data = pickle.load(p_cmp)
data = pickle.loads(p_cmp)
data
lst = [1, 2, 3]
lst[a]
lst['a']
import cpickle
import cPickle
format = pickle.dumps(1)
format
data = pickle.loads(format)
data
ls
lst
lst)
cmp
getattr(cmp, "real")
import numpy as np
np.arrange(9)
np.arange(9)
arr = np.arange(9)
arr.shape = (3, 3)
arr
arr[0]
a = arr[0]
a[2]
exit()
hi = (1, 3, 4)
hi[1]
exit
exit()
from objdict import ObjDict
dict = ObjDict()
dict2 = ObjDict({'VARS' : ObjDict(), 'SIGS' : ObjDict()}) 
dict2.get("VARS")
dict2.get("meh")
import pickle
pickle.dumps(None)
exit()
from objdict import ObjDict
type(ObjDict())
exit()
num = complex(1, 2)
gettatrr(num, "real")
getatrr(num, "real")
ls
getattr
getattr(num, "real")
hi = getattr(num, "real")
hi = 2
getattr(num, "real")
setattr(num, "real", 2)
num * 2
num + 1
num + 2
num 
num + 2i
class A:
exit()
lst = [1, 2, 3]
lst.__dir__
lst.__dir__()
lst.__setitem
lst.__setitem__(1)
lst.__setitem__(1, 2)
lst.__setitem__(0, 2)
lst
exit()
lst = [1, 2]
lst.__dir__
lst.__dir__()
lst.__getitem__(1)
exit()
type
exit()
lst = [1, 2, 3]
isinstance(lst, list)
exit()
with open("x.txt"), open("y.txt") as x, y
with open("x.txt"), open("y.txt") as x, y:
   x.write("hi")
   y.write("hi")
exit()
with open("x.txt"), open("y.txt") as x, y:
   x.write("hi")
   y.write("hi")
exit()
import zmq
from zmq import Context
server = Context()
socket = Context()
exit()
import zmq
ZMQ_EVENT_CONNECT_DELAYED
zmq.EVENT_CONNECT_DELAYED
import zmq
from zmq import Context
context = Context()
socket = context.socket(zmq.REP)
socket.bind("*:25565")
socket.bind("tcp://*:25565")
socket.recv_string()
socket.close()
socket = context.socket(zmq.REQ)
socket.bind("tcp://*:25565")
socket.close()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:25565")
socket.recv_string()
socket.close()
zmq.EVENT_DISCONNECTED
zmq.EVENT_CLOSE_FAILED
zmq.EVENT_ACCEPTED
zmq.EVENT_ACCEPT_FAILED
zmq.EVENT_BIND_FAILED
zmq.EVENT_BIND_CLOSED
zmq.EVENT_CLOSED_F
zmq.EVENT_CLOSE_FAILED
socket = context.socket(zmq.REP)
socket.bind("tcp://*:25565")
socket.recv_string()
socket.close()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:25565")
zmq.EVENT_CONNECTED
zmq.EVENT_CONNECT_DELAYED
zmq.EVENT_CONNECT_RETRIED
zmq.EVENT_CLOSED
exit()
context = Context()
import zmq
from zmq import Context
context = Context()
socket = Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:25565")
socket.recv_string()
socket.close()
exit()
import numpy as np
np.pow
pow
exit()
sys.insert(0, "silkworm")
import sys
sys.insert(0, "silkworm")
sys.path.insert(0, "silkworm")
import silkworm
exit()
import sys
sys.path.insert(0, "~/Documents/projects/RothLab/SILKWORM/silkworm")
sys.path.insert(0, "~/Documents/projects/Rothlab/SILKWORM/silkworm")
import silkworm
sys.path.insert(0, "~/Documents/Rothlab/projects/SILKWORM/silkworm")
import silkworm
sys.path.insert(0, "/home/emdash00/Documents/Rothlab/projects/SILKWORM/silkworm")
import silkworm
sys.path.insert(0, "/home/emdash00/Documents/Rothlab/projects/SILKWORM")
import silkworm
exit()
import sys
sys.path.insert(0, "~/Documents/Rothlab/projects/SILKWORM/"
)
import silkworm
sys.path.insert(0, "~/Documents/Rothlab/projects/SILKWORM/silkworm"
)
import silkworm
sys.path.insert(0, "home/emdash00/Documents/Rothlab/projects/SILKWORM/"
)
import silkworm
sys.path.insert(0, "home/emdash00/Documents/Rothlab/projects/SILKWORM/")
import silkworm
sys.path.insert(0, "home/emdash00/Documents/Rothlab/projects/SILKWORM/silkworm")
import silkworm
sys.path.insert(0, "home/emdash00/Documents/Rothlab/projects/SILKWORM")
import silkworm
sys.path.insert(0, "/home/emdash00/Documents/Rothlab/projects/SILKWORM")
import silkworm
exit()
import sys
sys.abspath("~"
)
sys.path.abspath("~"
)
sys.path.abspath("~")
import os
os.path.abspath("~")
os.path.abspath("~/DOcuments/")
os.path.abspath("~/Documents/")
os.path.abspath("/~/Documents/")
os.path.abspath("")
exit()
from units import Units
exit()
from units import Units
exit()
import zmq
zmq.Socket
exit
exit()
import zmq
from zmq import Context
context = Context()
socket = context.socket(zmq.REQ)
socket.setsockopt(zmq.CONNECT_TIMEOUT, 10)
socket.connect("tcp://localhost:25565")
socket.send_string("Hey can you give me a copy of an object")
socket.recv_pyobj()
socket.close()
exit()
isinstance(ValueError, Exception)
hi = ValueError
isinstance(ValueError, Exception)
isinstance(ValueError, ValueError)
type(ValueError) == type(Exception)
type(ValueError)
type(Exception)
exit()
1/0
try:
   1/0
except Exception as ex:
   ex.__str__
try:
   1/0
except Exception as ex:
   ex.__str__()
exit()
{"asdf" : 12}
dict = {"asdf" : 12}
dict.get("asdf")
dict.get("asd")
if (not dict.get("asd")):
   print("asdf")
exit()
import asyncio
exit()
import zmq
zmq.REP
exit()
import gr
gr.__file__
exit()
import numpy as np
np.nan
1 /np.nan
exit()
from numpy import nan
nan -nan
1 / nan
exit()
import ..silktime
import .silktime
exit()
from . import AbstractPendulum
from ...silktime import Timer
exit()
from ..silktime import Timer
exit()
import silktime
exit()
import silktime
exit()
import silktime
exit()
import silktime
eixt()
exit()
import silktime
exit()
import silktime
exit()
import .AbstractPendulum
from . import AbstractPendulum
exit()
import .
from ... import silktime
import silktime
exit()
import silkworm
exit()
import silkworm.silktime
exit()
import numpy
arr = numpy.arr([1, 2, 3])
arr = numpy.array([1, 2, 3])
numpy.roll(arr, -1)
arr
exit()
import numpy as np
arr = np.array([1, 2, 3])
arr = np.roll(arr, -1)
arr
exit()
import PyQt5.Qt
exit()
import PyQt5.Qt
exit()
import qtgr
exit()
from qtgr.backend import QtCore, QtGui
exit()
import os
os.path.join(os.path.dirname(os.path.realpath(__file__)), "kws.data")
exit()
len range(128)
len(range(128))
exit()
import numpy as np
len(np.random.random(128))
exit()
import qtgr
from qtgr.backend import QtWidgets
QtWidgets.M
exit()
from qtgr.backend import QtGui
exit()
np.arrange
numpy.arrange
import numpy
numpy.arrange
numpy.arange(1)
exit()
abs(-20)
exit()
import pigpio
exit()
pigpio.HIH
pigpio.HIGH
import pigpio
pigpio.HIGH
exit()
if 1:
   print('hi')
if 0:
   print('hi')
exit()
print('hi') if 1 else print('no')
print('hi') if 0 else print('no')
import RPi.GPIO as gpio
exit()
import socket
socket.gethostbyname("pi0w-RL00.local")
socket.gethostbyname("pi0w-RL0.local")
exit()
import socket
socket.gethostbyname("google.com")
socket.gethostbyname("yahoo.com")
socket.gethostbyname("pi0w-rl0.local")
exit()
import socket
socket.gethostbyname("localhost")
exit()\
try:
import socket
try:
   socket.gethostbyname("loclhost")
except Exception:
try:
   socket.gethostbyname("loclhost")
except Exception as ex:
   print(ex)
try:
   socket.gethostbyname("loclhost")
except Exception as ex:
   print("error")
exit()
import socket
try:
   socket.gethostbyname("yahoo.com")
except Exception as ex:
   print(type(ex))
try:
   socket.gethostbyname("yahoo")
except Exception as ex:
   print(type(ex))
hi
hi = ["localhost", "pi0w-rl0.local"]
range(hi)
range(*hi)
exit()
import socket
socket.gethostname()
exit()
4096 * 396791
exit()
4096 * 396791
exit()
import .
exit()
import math
exit()
import math
exit()
import silkutils
v = Vector([1, 2])
from silkutils import Vector
v = Vector([1, 2])
v.x
v.y
v.x += 1
v.x
v.x = v.x + 1
v2 = Vector([1, 2])
v1 * v2
v * v2
v3 - v * v2
v3 = v * v2
v3
v3.x
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v1.magnitude(
)
v2 = Vector([1, 1])
v3 = v1 * v2
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v1.magnitude()
v2 = Vector([1, 1])
v3 = v1 * v2
v3.x
v3.y
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v2 = Vector([1, 1])
v3 = v1 * v2
v3.x
v3.y
v4 = v3 * 2
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v2 = 2 * v1
v2 = v1 * 2
v2.x
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v2 = v1 * 2
v2.dx
v2.x
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v1.x += 1
v1.x
v1.x = 'a'
v1.x += 1.2\
v1.x
exit()
from silkutils import Vector
v1 = Vector([3, 4])
v1.x += 1.5
v1.x
v1 *= 2
exit()
from silkutils import Vector
exit()
from silkutils import Vector
v1 = Vector([0, 1])
v2 = Vector([1, 0])
Vector.cross
Vector.cross(v1, v2)
v3 = Vector.cross(v1, v2)
v3.x
import numpy as np
v1.z
exit()
import numpy as np
np.array([0, 1])
v1 = np.array([0, 1])
v2 = np.array([1, 0])
np.cross(v1, v2)
v1 = np.array([0, 1, 0])
v2 = np.array([1, 0, 0])
np.cross(v1, v2)
exit()
from silkutils import Vector
v1 = Vector(np.array([0, 1]))
v1 = Vector([0, 1])
v2 = Vector(np.array([1, 0]))
v2 = Vector([1, 0])
v3 = Vector.cross(v1, v2)
v3.z
v3.rotate2(1)
exit()
from silkutils import Vector
v1 = Vector([0, 1])
import numpy as np
v1.rotate2(np.pi/2)
v1.y
v1.x
v1.z
exit()
from silkutils import Vector
v1 = Vector([0, 1])
v1.rotate2(np.pi/2)
import numpy as np
v1.rotate2(np.pi/2)
v1.y
v1.x
v1.z
v2 = Vector([0, 0, 1])
v1.rotate3(v2, np.pi/2)
v1.x
v1.y
v1.z
exit()
from silkutils import StateVector
v = StateVector(['x', 'theta'], [0, 1, 2, 3])
v.x
v.x.setter()
v.theta
v.x1
v.x1 = 1
v.x1
v._arr
exit()
from silkutils import StateVector
v = StateVector(['x', 'theta'], [0, 1, 2, 3])
v.x
v.theta
exit()
from silkutils import StateVector
v = StateVector(['x', 'theta'], [0, 1, 2, 3])
v.m
exit()
from silkutils import StateVector
v = StateVector(['x', 'theta'], [0, 1, 2, 3])
v.m
v.m()
class Foo(object):
   pass
class Foo(object):
...     def bar(self):
...         pass
... class Foo(object):
class Foo(object):
   def bar(self):
      pass
exit()
class ex(object):
   pass
example = ex()
ex.a = 3
ex.a
ex.b = property(lambda self: self.a + 1)
ex.b
ex.b = property(lambda self: self.a + 1)
example.b
exit()
from test import StateEx
exit()
from test import StateEx
exit()
from test import StateEx
ex = StateEx(components=[1, 2])
StateEx([1, 2, 3])
exit()
from test import StateEx
StateEx([1, 2, 3])
exit()
from test import StateEx
exit()
from test import StateEx
ex = StateEx([1, 0, 2, .1])
ex.x
ex.x1
ex.theta
ex.theta1
ex.theta1 = 1
ex.theta1
exit()
from test import StateEx
exit()
from silkmath import *
clamp(1.2 (-1, 1))
clamp(1.2, (-1, 1))
clamp(-1, (0, 1))
linear_map(-1, (-1, 1), (-10, 10))
exit()
from silkmath import *
linear_map(-1, (-1, 1), (-10, 10))
exit()
from silkmath import *
PhysicalVector([1, 2, 3])
v1 = PhysicalVector([0, 0 , 1])
v1
v1.x
v1.y
v1.z
v1.theta
v1.r
v1.phi
exit()
v1 = PhysicalVector([0, 0 , 1])
from silkmath import *
v1 = PhysicalVector([0, 0 , 1])
v1.magnitude()
v1.rho
v1.r
v1.phi
v1.theta
exit()
from silkmath import *
v1 = PhysicalVector([0, 0 , 1])
v1.theta
v1.phi
exit()
from silkmath import *
v1 = PhysicalVector([2, 1])
v2 = PhysicalVector([4, 2])
v3 = v1 * v2
v3.x
exit()
from silkmath import *
v1 = PhysicalVector([2, 1])
v2 = PhysicalVector([4, 2])
v1 * v2
v1 @ v2
v3 = v1 @ v2
v3.x
v3.y
v3.z
exit()
import numpy as np
np.array([1, 2, 3])
exit()
from silkmath import *
v1 = PhysicalVector([2, 1])
v
v1
exit()
from silkmath import *
v1 = PhysicalVector([2, 1])
v1
exit()
from silkmath import *
v1 = PhysicalVector([2, 1])
v1
v2 = PhysicalVector([2, 2])
v2
v1 @ v2
v1 = PhysicalVector([1, 2, 3])
v2 = PhysicalVector([-1, 2, 3])
v1 @ v2
2 * v1
v1 * 2
dict = {}
dict['hi'] = "heya"
dict['hi2'] = "heyo"
dict
import numpy as np
arr = np.arr([1, 2, 3])
arr = np.array([1, 2, 3])
arr.__str__
arr.__str__()
arr
array.__repr__()
arr.__repr__()
exit()
from silkmath import *
exit()
from silkmath import *
v1 = StateEx([0, 1, 0, 1])
from test import StateEx
v1 = StateEx([0, 1, 0, 1])
v1
exit()
import numpy
numpy.__version__
exit()
import qtgr
exit()
one = "hi"
two = "hi"
one == two
one is two
exit()
sqrt(.001)
import math
sqrt(.001)
math.sqrt(.001)
math.sqrt(.0005)
math.sqrt(.00005)
math.sqrt(.00001)
math.sqrt(.00007)
math.sqrt(.00009)
math.sqrt(.00001)
math.sqrt(.00009)
2797*360
360/2797
.25/870
exit()
323/2797
323/2797 * 360
exit()
def c(k):
   for i in range(k - 1):
def c(k):
   c = []
def c(k):
   c = [1]
   for i in range(k - 1):
      c.append((c[i] * c[k - 1 - i])/((i + 1) * (2 * i + 1)))
  
def c(k):
   for i in range(k - 1):
      c.append((c[i] * c[k - 1 - i])/((i + 1) * (2 * i + 1)))
   sum = 0
def c(k):
   c = [1]
   for i in range(k - 1):
      c.append((c[i] * c[k - 1 - i])/((i + 1) * (2 * i + 1)))
   sum = 0
   for number in c:
      sum += number
   return sum
c(1)
c(2)
def c(k):
   c = [1]
   for i in range(k - 1):
      c.append((c[i] * c[k - 2 - i])/((i + 1) * (2 * i + 1)))
   sum = 0
   for number in c:
      sum += number
   return sum
c(2)
c(3)
c(1)
c(0)
def c(k):
   for i in range(k - 1):
      for m in range(i + 1):
def c(k):
   for i in range(k - 1):
def c(k):
   for i in range(k - 1):
      total = 0
      for m in range(i + 1):
def c(k):
   c = [1]
   for i in range(k - 1):
      total = 0
      for m in range(i + 1):
         total += (c[m] * c[-m]) / ((m + 1) * (2 * m + 1))
   total = 0
   for number in c:
      total += number
   return total
c(1)
def c(k):
   c = [1]
   for i in range(k - 1):
      total += number
def c(k):
   c = [1]
   for i in range(k - 1):
   total = 0
def c(k):
   c = [1]
   for i in range(k - 1):
      total = 0
      for m in range(i + 1):
         total += (c[m] * c[-m]) / ((m + 1) * (2 * m + 1))
      total = 0
   total = 0
   for number in c:
      total += number
   return total
c(1)
c(0)
c(2)
c(3)
def c(k):
   c = [1]
   for i in range(k - 1):
      total = 0
      for m in range(i):
         total += (c[m] * c[-m]) / ((m + 1) * (2 * m + 1))
   total = 0
   for number in c:
      total += number
   return total
c(1)
c(0)
c(2)
c(3)
c(4)
def c(k):
   for i in range(k - 1):
      total = 0
      for m in range(i):
         total += (c[m] * c[-m]) / ((m + 1) * (2 * m + 1))
      c.append(total)
   total = 0
   for number in c:
      total += number
   return total
c(0)
def c(k):
   c = [1]
   for i in range(k - 1):
      total = 0
      for m in range(i):
         total += (c[m] * c[-m]) / ((m + 1) * (2 * m + 1))
      c.append(total)
   total = 0
   for number in c:
      total += number
def c(k):
   c = [1]
   for i in range(k - 1):
      total = 0
      for m in range(i):
         total += (c[m] * c[-m]) / ((m + 1) * (2 * m + 1))
      c.append(total)
   total = 0
   for number in c:
      total += number
   return total
c(1)
c(0)
c(2)
c(3)
c(4)
c(5)
c(6)
exit()
20036983.0/(2 * 7 + 1)
exit()
tan
arctan
import math
arctan
atan
tan
math.arctan
math.atan
exit()
22.8 * 2797
exit()
from qtgr.backend import QtCore, QtGui
QtCore.QTabWidget
QtGui.QTabWidget
exit()
from qtgr.backend import QtCore, QtGui
from qtgr.backend import QtWidgets
QtWidgets.QTabWidget
exit()
import gr
gr.__dir__
gr.__dir__()
exit()
import numpy as np
np.mean([1, 2, 3, 4, 5])
exit()
2 ** 24
2 ** 32
2 ** 16
2 ** 32
exit()
4294967296/3000
4294967296/3000 * 2 * 3.14 * .1
2**16/3000 * 2 * 3.14 * .1
2**32/3000 * 2 * 3.14 * .1
(2**32)/3000 * 2 * 3.14 * .1
exit()
import QtWidgets.QTabWidget
import QtCore.QtWidgets.QTabWidget
from qtgr.backend import QtWidgets
QtWidgets.QTabWidget.setTabsClosable
exit()
from qtgr.backend import QtWidgets
QtWidgets.QMessageBox
exit()
20/360
if (-.5):
   print("hi")
exit()
import ipython
exit
exit()
import numpy asnp
import numpy as np
arr = np.zeros(shape=(5, 5))
for cell in np.nditer(a):
   cell = 1
for cell in np.nditer(arr):
   cell = 1
arr
for cell in np.nditer(arr, op_flags=['readwrite']):
   cell = 1
arr
exit()
import numpy as np
arr = np.zeros(10)
arr[1] = 1
arr
exit
exit()
import math
math.sqrt(3)
exit()
2 ** 9
1 + 2 + 4 + 8 + 16 + 32 + 64 + 128
exit()
x = 0b1111
x
x << 1
print("{:0b}".format(x))
print("{:0b}".format(x << 1))
print("{:0b}".format(x >> 1))
exit()
2 ** 32
exit()
2 ** 16
2 ** 32 / 2
exit()
2 ** 32
(2 ** 32) / 2
2 ** 31
exit()
prey = Prey()
import Prey
prey = Prey()
exit()
import Prey
prey = Prey.Prey()
exit()
example_dict = {1:'a', 2:'b', 3:'c', 4:'d'}
for i, k in enumerate(example_dict):
    print(i, k)
for i, k in example_dict.iteritems:
   print(i, k)
for i, k in example_dict.iteritems():
   print(i, k)
example_dict = {1:'a', 2:'b', 3:'c', 4:'d'}
exit()
dict = {}
exit()
2
(2 * 10E-5 * 50E-2 * .01)/(590E-9) 
beta = 10/(3E8)
beta
import math
math.sqrt(1 - beta ** 2)
math.sqrt(1 - beta ** 2) * 10
exit()
-1917963177/2
exit()
bin(0x7fc00000)
dec(111111110)
dec(0b111111110)
exit()
bin(7fffff)
bin(0x7fffff)
exit()
bin(0x7fc00000)
exit()
import sklearn
exit)(
exit()
import sklearn
from sklearn.model_selection import train_test_split
exit()
import matplotlib
exit()
from Prey import Prey
Prey(1, 1)
Prey()
pr = Prey()
pr.eat()
exit()
test = {}
test.keys
test.keys()
test = {"test": 1, "yo": 4}
test.keys()
hex(1 << 31 >> 8)
exit()
23 - 1
32 - 23
exit()
bin(0xcf000000)
exit()
import numpy as np
np.__dir__()
np.__path__()
exit()
np.__path__
import numpy as np
np.__path__
exit()
import zmq
exit)(
exit()
import silkworm
silkworm.__path__
exit()
import urllib3
exit()
import urllib3
urllib3.__path__
exit()
import matplotlib
matplotlib.__path__
import zmq
zmq.__path__
exit()
x = [1, 2, 3, 4]
x[2:]
x[1:]
x[0:]
exit()
x = [1, 2, 3, 4]
x[:-6]
x[:-1]
x[:1]
x[1:]
exit()
lst = [1, 2, 3, 4]
lst[1:]
lst[:1]
exit()
dec(0xe)
d(0xe)
int(0xe)
exit()
int(0x18)
int(0xe)
int(0x1f)
2/35
exit()
int(0x18)
int(0x1f)
exit()
import mpl_toolkits
mpl_toolkits.__path__
mpl_toolkits.__dir__
mpl_toolkits.__dir__()
exit()
bin (110)
int(0b110)
int(0b100)
exit()
int(0b110)
int(0b100)
exit()
bin(6310176)
exit()
int(0xf)
bin(0xf)
char(12)
int('a')
quit()
ascii(1)
ascii(12)
ascii('a')
chr(3)
chr(345)
chr()
int(0x43)
16 + 16 + 16 + 16
16 + 16 + 16 + 10
16 + 16 + 16 + 10 + 3
16 + 16 + 16 + 9
16 + 16 + 16 + 9 + 10
10 + 6 + 16 + 16 + 9 + 10
chr(2)
chr(6)
chr(1)
chr(5)
exit()
chr(60 & 0xF)
60 & 0xF
chr(60)
exit()
import matplotlib
matplotlib.__version__
exit()
a = [i for i in range(3)]
a
a = [i**2 for i in range(3)]
a
exit()
int(0x18)
exit()
int(0x3e8)
bin(1000)
exit()
import scipy
scipy.G
from scipy.constants import *
G
M = 2E30
-2 * G * M / (c ** 2)
R_s = 2 * G * M / (c ** 2)
R_s
rho_avg = 3 * M / ( 4 * pi / R_s ** 3)
rho_avg
rho_avg = 3 * M / ( 4 * pi * R_s ** 3)
rho_avg
3/32
from fractions import Fraction
Fraction(3,32)
M_e = 5.972E24
r_e = 6378E3
x = 20200E3
v = (G * M_e / (r_e + x)) ** .5
v
v/c
beta = v/c
gamma = (1 / ((1 + beta ** 2) ** .5))
gamma
gamma = (1 / ((1 - beta ** 2) ** .5))
gamma
12 * gamma
v
c
v / c
12 * gamma * 3600
\
epsilon
epsilon = (12 * gamma) - 12
epsilon
12 * gamma
epsilon_x = c * epsilon
epsilon_x
epsilon_x = (c * epsilon * 3600)
epsilon_x
x
h = x + r_earth
h = x + r_e
h
(G * M / c ** 2) * (-1/h + 1/r_e)
(G * m_e / c ** 2) * (-1/h + 1/r_e)
x
x/1000
r_e/1000
m_e
M
M = 5.97E24
(G * m_e / c ** 2) * (-1/h + 1/r_e)
(G * M / c ** 2) * (-1/h + 1/r_e)
grav_redshift = (G * M / c ** 2) * (-1/h + 1/r_e)
grav_redshift * (12 * 3600) * c
exit()
D_rms = 1
P = 1.01 * 105
K = 1.3806E-23
T = 273
r = .15E-9
m = 2.657E-26
(D_rms * ((P/(K * T)) * 4 * scipy.constants.pi * (r ** 2)) ** .5 * (3 * K * T / m) ** (-.25)) ** 2 
import scipy
(D_rms * ((P/(K * T)) * 4 * scipy.constants.pi * (r ** 2)) ** .5 * (3 * K * T / m) ** (-.25)) ** 2 
scipy.constants
import scipy.constants
from scipy.constants import *
(D_rms * ((P/(K * T)) * 4 * pi * (r ** 2)) ** .5 * (3 * K * T / m) ** (-.25)) ** 2 
(D_rms * ((P/(K * T)) * 4 * pi * (r ** 2)) ** .5 * ((3 * K * T) / m) ** (-.25)) ** 2 
t = (D_rms * ((P/(K * T)) * 4 * pi * (r ** 2)) ** .5 * ((3 * K * T) / m) ** (-.25)) ** 2 
print("{:.10E}".format(t))
P_new = .01 * P
t = (D_rms * ((P/(K * T)) * 4 * pi * (r ** 2)) ** .5 * ((3 * K * T) / m) ** (-.25)) ** 2 
print("{:.10E}".format(t))
t = (D_rms * ((P_new/(K * T)) * 4 * pi * (r ** 2)) ** .5 * ((3 * K * T) / m) ** (-.25)) ** 2 
print("{:.10E}".format(t))
(8.205)*273/1
n
P/(K * T
P/(K * T)
P
physical_constants['Boltzman']
physical_constants['Boltzmann']
physical_constants['k']
physical_constants[k]
physical_constants[Boltzmann]
physical_constants["Boltzmann"]
k
Boltzmann
N_A = 6.022E23
N_A * k * 273 / P
n
P
T
k
k_B = k
lambda = (k_B * T) / (P * (pi * (2 * R) ** 2)
l = (k_B * T) / (P * (pi * (2 * R) ** 2)
)
l
R
R = .15E-9
l = (k_B * T) / (P * (pi * (2 * R) ** 2)
)
l
((pi * (2 * R) ** 2)) / l) ** (1/3)
((pi * (2 * R) ** 2)) / l)) ** (1/3)
((pi * (2 * R) ** 2) / l) ** (1/3)
print("{:3E}".format(r)
)
r
r= ((pi * (2 * R) ** 2) / l) ** (1/3)
print("{:3E}".format(r)
)
2E7/3600
2E7/3600/265
2E7/3600/365
exit()
import numpy as np
t_d = [15.2, 15, 15.1, 15, 14.9, 15.1, 15.1, 15.0, 15.2, 15.2]
t_u = [6.4, 6.3, 6.1, 24.4, 24.2, 3.7, 3.6, 1.8, 2.0, 1.9]
len(t_d)
len(t_u)
t_dArr = np.array(t_d)
t_uArr = np.array(t_u)
1/t_dArr + 1/t_uArr
results = 1/t_dArr + 1/t_uArr
print(results)
clear
results / .108
l = 8.3E-4
v_d = 1/t_d
v_d = 1/t_d * l
v_d = 1/t_d
v_d
v_d = l/t_dArr
v_d
nu = 1.6E-5
g = 9.80
((v_d * 9 * nu)/ (30 * g)) ** .5
15.2/1.9
1/15.2 + 1/1.9
1/15.2 + 1/2
1/15.2 + 1/2 / .108
(1/15.2 + 1/2) / .108
(1/15.2 + 1/1.9) / .108
E = 1.21E5
from scipy.constants import *
rho = 839
r = ((v_d * 9 * nu)/ (30 * g)) ** .5
K = E / (6 * pi * r * nu * l)
K
q_e = (1/t_dArr + 1/t_uArr)/K
q_e
r = ((v_d * 9 * nu)/ (2 * rho * g)) ** .5
r
K = E / (6 * pi * r * nu * l)
q_e = (1/t_dArr + 1/t_uArr)/K
q_e
np.mean(q_e)
np.lcm((1/t_uArr + 1/t_dArr))
np.lcm((1/t_uArr + 1/t_dArr), 3)
np.lcm.reduce((1/t_uArr + 1/t_dArr), 3)
import fractions
np.lcm.reduce([1.2, 2.4])
np.lcm.reduce([1, 2])
np.lcm.reduce([1, 2, 5])
from math import gcd
gcd(1.2, 3.4)
(1/t_uArr + 1/t_dArr
(1/t_uArr + 1/t_dArr)/(.108/8)
(1/t_uArr + 1/t_dArr)/(.108/16)
(1/t_uArr + 1/t_dArr)/(.108/32)
(1/t_uArr + 1/t_dArr)/(.108/4)
(1/t_uArr + 1/t_dArr)/(.108/8)
(1/t_uArr + 1/t_dArr)/(.108/16)
(1/t_uArr + 1/t_dArr)/(.108/132)
(1/t_uArr + 1/t_dArr)/(.108/32)
(1/t_uArr + 1/t_dArr)/(.108/64)
(1/t_uArr + 1/t_dArr)/(.108/128)
(1/t_uArr + 1/t_dArr)/(.108/256)
(1/t_uArr + 1/t_dArr)/(.108/32)
(1/t_uArr + 1/t_dArr)/(.108/16)
(1/t_uArr + 1/t_dArr)/(.108/8)
(1/t_uArr + 1/t_dArr)/(.108/16)
(1/t_uArr + 1/t_dArr)/(.108/2 ** 10)
(1/t_uArr + 1/t_dArr)/(.108/2)
(1/t_uArr + 1/t_dArr)/(.108/8)
(1/t_uArr + 1/t_dArr)/(.108/16)
(1/t_uArr + 1/t_dArr)/(.108*16)
(1/t_uArr + 1/t_dArr)/(.108) * 4
(1/t_uArr + 1/t_dArr)/(.108) * 8
(1/t_uArr + 1/t_dArr)/(.108) * 16
(1/t_uArr + 1/t_dArr)/(.108) * 32
(1/t_uArr + 1/t_dArr)/(.108) * .5
(1/t_uArr + 1/t_dArr)/(.108)
rho
l
g
nu
E
r = ((v_d * 9 * nu)/ (2 * rho * g)) ** .5
K = E / (6 * pi * r * nu * l)
q_e = (1/t_dArr + 1/t_uArr)/K
t_sum = 1/t_dArr + 1/t_uArr
t_sum
t_sum / np.min(t_sum)
t_sum / 1.609E-19
t_sum / 9
t_sum / .1609
t_sum / .1609 * 2
t_sum / .2
t_sum / .3
t_sum / .4
t_sum
t_sum / .05
t_sum / .06
t_sum / .0106
t_sum / .0106 * 2
t_sum / .0106 * 4
t_sum / .0106 * 8
t_sum / .0106 * 16
t_sum / .015 * 16
t_sum / .018 * 16
t_sum / .02 * 16
exit()
import numpy as np
t_d = np.array([15.2, 15.0, 15.1, 15, 14.9, 15.1, 15.1, 15, 15.2, 15.2])
t_u = np.array([6.4, 6.3, 6.1, 24.4, 24.2, 3.7, 3.6, 1.8, 2.0, 1.9])
len t_d
len(t_d)
len(t_u)
1/(t_down - .1) + 1/(t_up - .1)
1/(t_d - .1) + 1/(t_u - .1)
1/(t_d + .1) + 1/(t_u + .1)
t_sumMin = 1/(t_d + .1) + 1/(t_u + .1)
t_sumMax = 1/(t_d - .1) + 1/(t_u - .1)
t_sumMin / .108
t_sumMax / .108
t_sumMax / .108 * 32
t_sumMax / (.108 * 32)
t_sumMin / (.108 * 32)
t_sumMin
t_sumMin / (.108 / 32)
t_sumMin / (.108 / 16)
t_sumMin / (.108 / 32)
t_sumMin / (.108 / 64)
t_sumMin / (.108 / 128)
t_sumMax / (.108 / 128)
t_sumMax / (.108 / 32)
t_sumMin / (.108 / 32)
t_sumMin / (.108 / 16)
t_sumMin / (.108 / 32)
t_sumMax / (.108 / 16)
t_sumMin / (.108 / 16)
t_sumMin / (.108) 
t_sumMax / .108
exit()
int(0x28d)
int(0x58)
ascii(0x70)
chr(112)
int(0x258)
int(0x248)
exit()
from . import Units
import Units
exit)(
import .
exit)(
exit()
from silkworm.silktime import Units
import silkworm.silktime
exit()
import silkworm
exit)(
exit()
import silkworm
from silkworm.silktime import Timer
exit()
import context
with context.Context() as ctx:
exit()
from silkworm.silktime import CycleTimer
stepper = CycleTimer(interval=1/10)
from context import Context
with Context() as ctx:
     stepper.start()
     while stepper.elapsed_raw() < 10:
         while not stepper.tick()
         while not stepper.tick():
with Context() as ctx:
     while stepper.elapsed_raw() < 10:
         while not stepper.tick():
with Context() as ctx:
   stepper.start()
   while stepper.elapsed_raw() < 10:
with Context() as ctx:
   ctx.begin()
exit()
from context import Context
with Context() as ctx:
   ctx.begin()
   
exit()
with Context() as ctx:
   ctx.begin()
from context import Context
with Context() as ctx:
   ctx.begin()
with Context() as ctx:
   pass
exit()
with Context() as ctx:
from context import Context
with Context() as ctx:
   pass
from context import Context
with Context() as ctx:
   pass
exit()
import warmup
warmup.process_data
exit()
ascii(1)
ascii(234)
int(0x28d)
char(59)
chr(59)
chr(0b0110010)
chr(0b01100010)
chr(0b01101111)
chr(0b0110111)
chr(0b01101111)
exit()
str = "123"
str[0]
import codecs
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
import pickle
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
obj = "123"
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
pickled
unpickled = pickle.loads(codecs.decode(pickled.encode(), "base64")) 
unpickled
pickled = codecs.encode(pickle.dumps(obj), "hex").decode()
pickled
import zlib
pickled = codecs.encode(pickle.dumps(obj), "hex").decode()
pickled = codecs.encode(zlib.compress(pickle.dumps(obj)), "hex").decode()
pickled
pickled = codecs.encode(zlib.compress(pickle.dumps(obj)), "base64").decode()
pickled
pickled = codecs.encode(pickle.dumps(obj), "hex").decode()
exit()
import zmq
from zmq import Context
client = Context(zmq.REQ)
client = Context.socket(zmq.REQ)
client = context.socket(zmq.REQ)
ctx = Context()
client = ctx.socket(zmq.REQ)
server = ctx.socket(zmq.REP)
import socket
server.bind(socket.gethostbyname('localhost'), 9535)
server.bind("tcp://socket.gethostbyname('localhost'):{}")
server.bind("tcp://{}:{}".format(socket.gethostbyname('localhost'), 9535)
)
client.connect("tcp://{}:{}".format(socket.gethostbyname('localhost', 9535)
)
client.connect("tcp://localhost:9535")
client.send_string("Hello world")
print(server_recv_string())
print(server.recv_string())
client.send_string("Hello world 2")
server.send_string("Hello other world."
)
print(client.recv_string())
ctx.destroy()
exit)(
exit()
import zmq
from zmq import Context
ctx = Context()
client = ctx.socket(zmq.PUB)
client2 = ctx.socket(zmq.PUB)
server = ctx.socket(zmq.SUB)
exit()
import zmq
from zmq import Context
ctx = Context()
client1 = ctx.socket(zmq.REP)
client2 = ctx.socket(zmq.REP)
server = ctx.socket(zmq.REQ)
server.bind("tcp://localhost:9500")
server.bind("tcp://127.0.0.1:9500")
client1.connect("tcp://localhost:9500")
client2.connect("tcp://localhost:9500")
poller = zmq.Poller()
poller.register(client1, POLLIN)
poller.register(client1, zmq.POLLIN)
poller.register(client2, zmq.POLLIN)
server.send_string("Hello world")
sockets = dict(poller.poll(5000))
for socket in sockets:
   if socket is client1:
      print("client1")
      print(client1.recv_string())
   elif socket is client2:
      print("client2")
      print(client2.recv_string())
sockets = dict(poller.poll(5000))
sockets
server.send_string("hello")
ctx.destroy()
exit()
import zmq
from zmq import Context
server = ctx.socket(zmq.PUB)
ctx = Context()
server = ctx.socket(zmq.PUB)
client1 = ctx.socket(zmq.SUB)
client2 = ctx.socket(zmq.SUB)
server.bind("tcp://127.0.0.1:9500")
client1.connect("tcp://localhost:9500")
client2.connect("tcp://localhost:9500")
server.send_string("Hello world")
poller = zmq.Poller()
poller.register(client1, zmq.POLLIN)
poller.register(client2, zmq.POLLIN)
sockets = dict(poller.poll(5000))
sockets
server.send_string("hi")
client1.recv_string()
client1.recv_string(1000)
client.send_string("HI")
client1.send_string("HI")
client.setsockopt(zmq.SUBSCRIBE)
client1.setsockopt(zmq.SUBSCRIBE)
ctx.destroy()
exit()
import zmq
from zmq import Context
ctx = Context()
server = Context()
server.destroy()
server = ctx.socket(zmq.PUB)
server.bind("127.0.0.1:9600")
server.bind("tcp://127.0.0.1:9600")
client = ctx.socket(zmq.SUB)
client.connect("tcp://localhost:9600")
client.)
client.get(zmq.SUBSCRIBE)
client.getsockopt(zmq.SUBSCRIBE)
clear
server.send_string("hi")
str = client.recv_string()
client.setsockopt(zmq.SUBSCRIBE, '')
client.setsockopt_string(zmq.SUBSCRIBE, '')
client.recv_string()
client.disconnect()
ctx.destroy()
exit()
import zmq
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.PUB)
client = ctx.socket(zmq.SUB)
server.bind("tcp://127.0.0.1:9600")
client.setsockopt_string(zmq.SUBSCRIBE, '')
client.linger = 0
client.connect("tcp://localhost:9600")
server.send_string("hi")
poller = zmq.Poller()
poller.register(client, zmq.POLLIN)
sockets = dict(poller.poll(5000))
sockets
for socket in sockets:
   if socket is client:
      print(client.recv_string())
client2 = ctx.socket(zmq.SUB)
client2.linger = 0
client2.setsockopt_string(zmq.SUBSCRIBE, '')
client2.connect("tcp://localhost:9500")
client2.disconnect("tcp://localost:9500")
client2.disconnect("tcp://127.0.0.1:9500")
client2.connect("tcp://127.0.0.1:9600")
server.send_string("hello world")
poller.register(client2, zmq.POLLIN)
sockets = dict(poller.poll(5000))
sockets
for socket in sockets:
   if socket is client:
      print("client")
   elif socket is client2:
      print("client2")
ctx.destroy()
exit()
import zmq
import zmq.asyncio
from zmq.asyncio import Context
import asyncio
ctx = Context()
server = ctx.socket(zmq.REP)
server.__dir__()
setattr(server, 'owner', 1)
server
server.test = 1
exit()
import zmq
from zmq import Context()
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.REP)
server2 = ctx.socket(zmq.REP)
server
server2
exit()
hi = [1, 2, 3]
setattr(hi, "test", 1)
import zmq
ctx = zmq.Context()
socket = ctx.socket(zmq.REP)
socket.__dir__()
socket.__dict__()
socket.__dict__
socket.__class__
exit()
import zmq
from zmq import Context
ctx = zmq.Context()
socket = ctx.socket(zmq.REP)
socket.__dir__
socket.__dir__()
socket.__slots__
exit()
impot zmq
import zmq
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.PUB)
client = ctx.socket(zmq.SUB)
server.bind("tcp://127.0.0.1")
server.bind("tcp://127.0.0.1:9600")
client.connect("tcp://localhost:9600")
server.send_string("hi")
client.recv_string()
ctx.destroy()
exit()
from zmq import Context
server = ctx.socket(zmq.PUB)
ctx = Context()
server = ctx.socket(zmq.PUB)
import zmq
ctx = Context()
server = ctx.socket(zmq.PUB)
client = ctx.socket(zmq.SUB)
client.setsockopt_string(zmq.SUBSCRIBE, '')
server.bind("tcp://127.0.0.1:9535")
client.connect("tcp://127.0.0.1:9535")
server.send_string("hi")
print(client.recv_string())
exit)(
exit()
import zmq
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.PUB)
server.bind("tcp://127.0.0.1:5555")
server.send_string("hello world")
exit()
import zmq
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.PUB)
server.bind("tcp://127.0.0.1:5555")
server.send_string("hello world")
python3
ctx.destroy()
exit()
import zmq
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.PUB)
client = ctx.socket(zmq.SUB)
dict = {server : 1, client : 2}
dict[server]
dict[cllient]
dict[client]
exit()
import zmq
from zmq import Context
ctx = Context()
client = ctx.socket(zmq.SUB)
client2 = ctx.socket(zmq.SUB)
stuff = {client : 1, client2, 2}
stuff = {client : 1, client2: 2}
stuff[client]
stuff[client2]
exit()
import zmq
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.PUB)
server.__hash__
exit()
import zmq 
from zmq import Context
ctx = Context()
server = ctx.socket(zmq.REP)
client = ctx.socket(zmq.REQ)
server.bind("tcp://127.0.0.1:5555")
client.connect("tcp://127.0.0.1:9535")
thingy = {"one" : 1, "two" : 2}
server.send_multipart([thingy, "hi"])
dictFrame = zmq.Frame(data=thingy, copy=False)
dictFrame = zmq.Frame(data=bytes(thingy), copy=False)
import memoryview
memoryview
memoryview(thingy)
exit()
class A:
   __init__(self, a):
   def __init__ (self, a):
class A:
   def __init__ (self, a):
      self.a = 1
a = A(1)
def b(obj):
   obj.a = 12
b(a)
a
a.a
exit()
import zmq
from zmq import Context
exit()
import zmq
import zmq.asyncio
from zmq.asyncio import Context
ctx = Context()
server = ctx.socket(zmq.REP)
client = ctx.socket(zmq.REQ)
ctx.destroy()
ctx = Context()
client = ctx.socket(zmq.REQ)
server = ctx.socket(zmq.REP)
server.bind("tcp://127.0.0.1:5555")
client.connect("tcp://127.0.0.1:5555")
client.send_string("Hello world")
str = server.recv_string()
str
str = await server.recv_string()
exit()
import pickle
import codecs
obj = 1
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
pickled
unpickled = pickle.loads(codecs.decode(pickled.encode(), "base64"))
unpickled
exit()
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
import pickle
import codecs
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
obj = {}
pickled = codecs.encode(pickle.dumps(obj), "base64").decode()
type(pickled)
exit()
import zmq
from zmq import Context
ctx = Context()
client = ctx.socket(zmq.SUB)
client.connect("127.0.0.1:9535")
client.connect("tcp://127.0.0.1:9535")
print(client.recv_string())
client.setsockopt_string(zmq.SUBSCRIBE, '')
print(client.recv_string())
ctx.destroy()
exit()
from sigfig import *
fexp(1E3)
fexp(10E3)
fman(10E3)
floatfman(2E3)
float(fman(2E3))
exit()
from sigfig import *
round_sig(123, 2)
exit()
from sigfig import *
round(float(fman(123)), 2))
round(float(fman(123)), 2)
round(float(fman(123)), 2) ** fexp(123)
round(float(fman(123)), 2) ** (fexp(123) + 1)
fexp(123)
round(float(fman(123)), 2) * (10 ** fexp(123))
round(float(fman(123)), 1) * (10 ** fexp(123))
exit()
19 + 31 + 20 + 14 + 7.5
20 + 24 + 10 + 26 + 4 + 3 + 6 + 6 + 15 + 5 + 
20 + 24 + 10 + 26 + 4 + 3 + 6 + 6 + 15 + 5
20 + 24 + 10 + 26 + 15
exit()
210-85
exit()
import gr
from gr.pygr import mlab
import numpy as np
x = np.linspace(-2, 2, 40)
y = 0.2 * x + 0.4
mlab.scatter(x, y)
mlab.hold(True)
mlab.scatter(x, lambda x: 0.4 * x + 0.6)
mlab.hold(False)
mlab.scatter(x, lambda x: 0.6 * x + 0.8)
exit()
85 + 79 + 118 + 131 + 112 + 31 + 67+ 106 + 137
866/10
1382 + 1266 + 1175 + 1171 + 1251 + 1212 + 1083 + 1031 + 1054 + 1397
12022/10
exit()
8 + 6 + 6 + 6 + 6 + 6 + 6 + 7 + 6 + 6
63 / 10
6 + 7 + 6 + 6 + 8 + 8 + 8 + 6 + 6 + 6
67/10
7 + 8 + 8 + 7 + 4 + 4 + 4 + 4 + 4 + 3
53/10
250 + 247 + 246 + 292 + 416 + 414 + 249  248 + 249 + 249
250 + 247 + 246 + 292 + 416 + 414 + 249 +  248 + 249 + 249
2860/10
413 + 418 + 256 + 253 + 570 + 379 + 197 +  170 + 185 + 131
2971/10
22681 + 14812 + 7480 + 5970 + 5653 + 5876 + 5619 + 5531 + 5544 + 5590
84756/10
6783 + 6078 + 5575 + 6847 + 5990 + 6594 + 5937 + 5649 + 6113 + 6526
62092/10
495385 + 462990 + 459449 + 460595 + 458266 + 458736 + 454620 + 456513 + 465908 + 461297
4633759/10
916609 + 900743 + 900653 + 894758 + 879541 + 898153 + 904306 + 881617 + 889096 + 892470
8957946/10
11514563 + 11447457 + 11865317.0 + 12682042.0 + 12810433.0  + 11833977.0 + 11356757.0 +11319923.0+10765457.0+10811855.0
116407781.0/10
lst = [47631955.0,47801440.0,47776111.0,47463408.0,47025035.0,47123696.0,48299025.0,47606954.0,4788547,46670141.0]
lst
import numpy as np
np.mean(lst)
exit()
40-15
exit()
import zmq
exit()
2E6 - 1
3 * (2E6 - 1)
+ 1
3 * (2E6 - 1) + 1
exit()
ext()
from scipy.constants import *
dx = 5 # fm
dx = 5E-15
hbar / (2 * dx)
exit()
0x55 << 25 + 0x55 + 17 + 0x55 << 9 + 0x55
bin(1108147571125960430930034454494701719611998806154269320346060404448783427071255168163768172544)
bin(0x55)
bin(0x55 << 25)
len('10101010000000000000000000000000')
0x55 << 25 + 0x55 << 17 + 0x55 << 9 + 0x55
bin(0x55 << 25 + 0x55 << 17 + 0x55 << 9 + 0x55)
bin(0x55 << 25)
bin(0x55 << 17)
bin(0x55 << 9)
bin(0x55)
0x55 + 0x55 << 9
bin(87040)
0x55 + 0x55 << 8
bin(43520)
0x55 + (0x55 << 8)
bin(0x55 | (0x55 << 8)
bin(0x55 | (0x55 << 8))
len(bin(0x55 | (0x55 << 8)))
len(bin(0x55 | (0x55 << 9)))
len(bin(0x55 | (0x55 << 7)))
bin(0x55 | (0x55 << 7))
bin(0x55 | (0x55 << 9))
exit()
(0xAA << 25) + (0xAA << 17) + (0xAA << 9) + (0xAA)
bin(5726622890)
len(101010101010101010101010010101010)
len('101010101010101010101010010101010')
(0xAA << 24) + (0xAA << 16) + (0xAA << 8) + (0xAA)
len(bin(2863311530))
bin(2863311530)
exit()
bin(0x03)
bin((0xFF + (0xFF << 8)) << 16))
bin((0xFF + (0xFF << 8)) << 16)
len(bin((0xFF + (0xFF << 8)) << 16))
bin('1111111111111111')
len('1111111111111111')
exit()
3 * 3.14 / 2
exit()
hex(0xFFFFFFFF | 0xFF00FF00
hex(0xFFFFFFFF | 0xFF00FF00)
hex(0xFFFFFF00 | 0xFF00FF00)
hex(~(0xFFFFFF00 | 0xFF00FF00))
exit()
import skimage
exit()
512 ** 2
exit()
from sim import *
start()
exit()
input()
asdf
int(input())
asdf
exit()
2.11E-2/5.9E-5
exit)(
exit()
from scipy.constant import *
from scipy.constants import *
2 * pi / (.2E-9)
m_p
2 * pi / (.2E-9) / m_p
2 * pi / (.2E-9) / m_e
2 * pi / (.2E-9) / m_e * hbar
2 * pi / (.2E-9) / m_e * hbar / 2
m_e
m_p
hba
hbar
def E(n):
   return (hbar ** 2 / 2 * m) * (n ** 2 * pi ** 2 / L ** 2)
E(1)
def E(n):
   return (hbar ** 2 / 2 * m_p) * (n ** 2 * pi ** 2 / L ** 2)
for i in range(1, 4):
   print(E(n))
for i in range(1, 4):
   print(E(i))
def E(n):
   return (hbar ** 2 / 2 * m_p) * (n ** 2 * pi ** 2 / 5E-15 ** 2)
for i in range(1, 4):
   print(E(i))
   return (hbar ** 2 / (2 * m_p)) * (n ** 2 * pi ** 2 / 5E-15 ** 2)
def E(n):
   return (hbar ** 2 / (2 * m_p)) * (n ** 2 * pi ** 2 / 5E-15 ** 2)
for i in range(1, 4):
   print(E(i))
   print(E(i) * 6.24E18)
for i in range(1, 4):
   print(E(i) * 6.24E18)
exit
exit()
import numpy as np
np.random.randint(2, size=10)
np.random.randint(low=0, high=2, size=10)
exit)(
exit()
from scipy.constants import *
sqrt(2 * m_e * 3 / hbar ** 2)
import numpy as np
sqrt(2 * m_e * 3 / 1.054E-34 ** 2)
np.sqrt(2 * m_e * 3 / 1.054E-34 ** 2)
np.sqrt(2 * (.511E6 / c ** 2)  * 3 / 1.054E-34 ** 2)
np.sqrt(2 * (.511E6 / c ** 2)  * 3 / 6.582E-16 ** 2)
num = np.sqrt(2 * (.511E6 / c ** 2)  * 3 / 6.582E-16 ** 2)
print("{:.2E}".format(num))
P = e ** (-2 * num * 4E-9)
P
num * 4E-9
P = e ** (-2 * 35.495024943321646)
e ** 34
P = e ** 34
e
P = E ** (-2 * num * 4E-9)
E
P = 2.718 ** (-2 * num * 4E-9)
P
num
num * 4E-9
e ** -40
2.718 ** -40
2.718 ** -70
num = np.sqrt((2 * m_e * 3 * 1.602E-19) / hbar ** 2))
num = np.sqrt((2 * m_e * 3 * 1.602E-19) / hbar ** 2)
num
alpha
alpha = 1
alpha
alpha = np.sqrt((2 * m_e * 3 * 1.602E-19) / hbar ** 2)
constants['euler']
2.718033 ** (-2 * alpha * 4E-9)
exit()
bin(1 + 127)
exit()
127-23
bin(104)
bin(127 - 3)
dec(10000010)
int(10000010,2)
int("10000010",2)
130 + 127
int(3 - 127
int(3 - 127)
bin(-124)
23 - 127
bin(-104)
bin(104)
bin(130)
exit()
(int)(.4)
(int)(-.1)
exit()
import opencv
import cv2
import cv
exit()
import cv2
exit()
ascii(' ')
ord('q')
exit()
import numpy as np
arr = np.zeros(5)
ls
arr
arr[1:]
arr = np.arrange(5)
arr = np.arange(5)
arr
arr[1:]
arr[1:3]
arr[:]
arr = np.arange(4)
arr = np.reshape(2,2)
arr = np.reshape(arr, (2, 2))
arr
arr[1]
arr[2]
arr[0]
arr[1]
arr[:, 0]
arr
arr[:, 1]
arr[:, 1].reshape(-1, 1)
arr[:, 0] = 0
arr
exit()
